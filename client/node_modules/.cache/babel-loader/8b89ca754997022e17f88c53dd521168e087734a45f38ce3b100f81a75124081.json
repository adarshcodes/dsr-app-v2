{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getRouteRegex = getRouteRegex;\nexports.getNamedRouteRegex = getNamedRouteRegex;\nexports.getNamedMiddlewareRegex = getNamedMiddlewareRegex;\nvar _extends = require(\"@swc/helpers/lib/_extends.js\").default;\nvar _escapeRegexp = require(\"../../escape-regexp\");\nvar _removeTrailingSlash = require(\"./remove-trailing-slash\");\n/**\n * Parses a given parameter from a route to a data structure that can be used\n * to generate the parametrized route. Examples:\n *   - `[...slug]` -> `{ name: 'slug', repeat: true, optional: true }`\n *   - `[foo]` -> `{ name: 'foo', repeat: false, optional: true }`\n *   - `bar` -> `{ name: 'bar', repeat: false, optional: false }`\n */\nfunction parseParameter(param) {\n  const optional = param.startsWith('[') && param.endsWith(']');\n  if (optional) {\n    param = param.slice(1, -1);\n  }\n  const repeat = param.startsWith('...');\n  if (repeat) {\n    param = param.slice(3);\n  }\n  return {\n    key: param,\n    repeat,\n    optional\n  };\n}\nfunction getParametrizedRoute(route) {\n  const segments = (0, _removeTrailingSlash).removeTrailingSlash(route).slice(1).split('/');\n  const groups = {};\n  let groupIndex = 1;\n  return {\n    parameterizedRoute: segments.map(segment => {\n      if (segment.startsWith('[') && segment.endsWith(']')) {\n        const {\n          key,\n          optional,\n          repeat\n        } = parseParameter(segment.slice(1, -1));\n        groups[key] = {\n          pos: groupIndex++,\n          repeat,\n          optional\n        };\n        return repeat ? optional ? '(?:/(.+?))?' : '/(.+?)' : '/([^/]+?)';\n      } else {\n        return `/${(0, _escapeRegexp).escapeStringRegexp(segment)}`;\n      }\n    }).join(''),\n    groups\n  };\n}\nfunction getRouteRegex(normalizedRoute) {\n  const {\n    parameterizedRoute,\n    groups\n  } = getParametrizedRoute(normalizedRoute);\n  return {\n    re: new RegExp(`^${parameterizedRoute}(?:/)?$`),\n    groups: groups\n  };\n}\n/**\n * Builds a function to generate a minimal routeKey using only a-z and minimal\n * number of characters.\n */\nfunction buildGetSafeRouteKey() {\n  let routeKeyCharCode = 97;\n  let routeKeyCharLength = 1;\n  return () => {\n    let routeKey = '';\n    for (let i = 0; i < routeKeyCharLength; i++) {\n      routeKey += String.fromCharCode(routeKeyCharCode);\n      routeKeyCharCode++;\n      if (routeKeyCharCode > 122) {\n        routeKeyCharLength++;\n        routeKeyCharCode = 97;\n      }\n    }\n    return routeKey;\n  };\n}\nfunction getNamedParametrizedRoute(route) {\n  const segments = (0, _removeTrailingSlash).removeTrailingSlash(route).slice(1).split('/');\n  const getSafeRouteKey = buildGetSafeRouteKey();\n  const routeKeys = {};\n  return {\n    namedParameterizedRoute: segments.map(segment => {\n      if (segment.startsWith('[') && segment.endsWith(']')) {\n        const {\n          key,\n          optional,\n          repeat\n        } = parseParameter(segment.slice(1, -1));\n        // replace any non-word characters since they can break\n        // the named regex\n        let cleanedKey = key.replace(/\\W/g, '');\n        let invalidKey = false;\n        // check if the key is still invalid and fallback to using a known\n        // safe key\n        if (cleanedKey.length === 0 || cleanedKey.length > 30) {\n          invalidKey = true;\n        }\n        if (!isNaN(parseInt(cleanedKey.slice(0, 1)))) {\n          invalidKey = true;\n        }\n        if (invalidKey) {\n          cleanedKey = getSafeRouteKey();\n        }\n        routeKeys[cleanedKey] = key;\n        return repeat ? optional ? `(?:/(?<${cleanedKey}>.+?))?` : `/(?<${cleanedKey}>.+?)` : `/(?<${cleanedKey}>[^/]+?)`;\n      } else {\n        return `/${(0, _escapeRegexp).escapeStringRegexp(segment)}`;\n      }\n    }).join(''),\n    routeKeys\n  };\n}\nfunction getNamedRouteRegex(normalizedRoute) {\n  const result = getNamedParametrizedRoute(normalizedRoute);\n  return _extends({}, getRouteRegex(normalizedRoute), {\n    namedRegex: `^${result.namedParameterizedRoute}(?:/)?$`,\n    routeKeys: result.routeKeys\n  });\n}\nfunction getNamedMiddlewareRegex(normalizedRoute, options) {\n  const {\n    parameterizedRoute\n  } = getParametrizedRoute(normalizedRoute);\n  const {\n    catchAll = true\n  } = options;\n  if (parameterizedRoute === '/') {\n    let catchAllRegex = catchAll ? '.*' : '';\n    return {\n      namedRegex: `^/${catchAllRegex}$`\n    };\n  }\n  const {\n    namedParameterizedRoute\n  } = getNamedParametrizedRoute(normalizedRoute);\n  let catchAllGroupedRegex = catchAll ? '(?:(/.*)?)' : '';\n  return {\n    namedRegex: `^${namedParameterizedRoute}${catchAllGroupedRegex}$`\n  };\n}","map":{"version":3,"names":["getRouteRegex","getNamedRouteRegex","getNamedMiddlewareRegex","_escapeRegexp","require","_removeTrailingSlash","parseParameter","param","optional","startsWith","endsWith","slice","repeat","key","getParametrizedRoute","route","segments","removeTrailingSlash","split","groups","groupIndex","parameterizedRoute","map","segment","pos","escapeStringRegexp","join","normalizedRoute","re","RegExp","buildGetSafeRouteKey","routeKeyCharCode","routeKeyCharLength","routeKey","i","String","fromCharCode","getNamedParametrizedRoute","getSafeRouteKey","routeKeys","namedParameterizedRoute","cleanedKey","replace","invalidKey","length","isNaN","parseInt","result","_extends","namedRegex","options","catchAll","catchAllRegex","catchAllGroupedRegex"],"sources":["../../../../../src/shared/lib/router/utils/route-regex.ts"],"sourcesContent":[null],"mappings":"AAAA;;;;;QA0DgBA,aAAa,GAAbA,aAAa;QA8EbC,kBAAkB,GAAlBA,kBAAkB;QAalBC,uBAAuB,GAAvBA,uBAAuB;;AArJJ,IAAAC,aAAqB,GAAAC,OAAA,CAArB,qBAAqB;AACpB,IAAAC,oBAAyB,GAAAD,OAAA,CAAzB,yBAAyB;AAa7D;;;;;;;AAOA,SAASE,cAAcA,CAACC,KAAa,EAAE;EACrC,MAAMC,QAAQ,GAAGD,KAAK,CAACE,UAAU,CAAC,GAAG,CAAC,IAAIF,KAAK,CAACG,QAAQ,CAAC,GAAG,CAAC;EAC7D,IAAIF,QAAQ,EAAE;IACZD,KAAK,GAAGA,KAAK,CAACI,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE5B,MAAMC,MAAM,GAAGL,KAAK,CAACE,UAAU,CAAC,KAAK,CAAC;EACtC,IAAIG,MAAM,EAAE;IACVL,KAAK,GAAGA,KAAK,CAACI,KAAK,CAAC,CAAC,CAAC;;EAExB,OAAO;IAAEE,GAAG,EAAEN,KAAK;IAAEK,MAAM;IAAEJ;GAAU;;AAGzC,SAASM,oBAAoBA,CAACC,KAAa,EAAE;EAC3C,MAAMC,QAAQ,GAAG,IAAAX,oBAAmB,EAAOY,mBAAP,CAACF,KAAK,CAAC,CAACJ,KAAK,CAAC,CAAC,CAAC,CAACO,KAAK,CAAC,GAAG,CAAC;EAC/D,MAAMC,MAAM,GAAmC,EAAE;EACjD,IAAIC,UAAU,GAAG,CAAC;EAClB,OAAO;IACLC,kBAAkB,EAAEL,QAAQ,CACzBM,GAAG,CAAEC,OAAO,IAAK;MAChB,IAAIA,OAAO,CAACd,UAAU,CAAC,GAAG,CAAC,IAAIc,OAAO,CAACb,QAAQ,CAAC,GAAG,CAAC,EAAE;QACpD,MAAM;UAAEG,GAAG;UAAEL,QAAQ;UAAEI;QAAM,CAAE,GAAGN,cAAc,CAACiB,OAAO,CAACZ,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACtEQ,MAAM,CAACN,GAAG,CAAC,GAAG;UAAEW,GAAG,EAAEJ,UAAU,EAAE;UAAER,MAAM;UAAEJ;SAAU;QACrD,OAAOI,MAAM,GAAIJ,QAAQ,GAAG,aAAa,GAAG,QAAQ,GAAI,WAAW;OACpE,MAAM;QACL,OAAQ,IAAG,IAAAL,aAAkB,EAASsB,kBAAT,CAACF,OAAO,CAAE,EAAC;;KAE3C,CAAC,CACDG,IAAI,CAAC,EAAE,CAAC;IACXP;GACD;;AAQI,SAASnB,aAAaA,CAAC2B,eAAuB,EAAc;EACjE,MAAM;IAAEN,kBAAkB;IAAEF;EAAM,CAAE,GAAGL,oBAAoB,CAACa,eAAe,CAAC;EAC5E,OAAO;IACLC,EAAE,EAAE,IAAIC,MAAM,CAAE,IAAGR,kBAAmB,SAAQ,CAAC;IAC/CF,MAAM,EAAEA;GACT;;AAGH;;;;AAIA,SAASW,oBAAoBA,CAAA,EAAG;EAC9B,IAAIC,gBAAgB,GAAG,EAAE;EACzB,IAAIC,kBAAkB,GAAG,CAAC;EAE1B,OAAO,MAAM;IACX,IAAIC,QAAQ,GAAG,EAAE;IACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,kBAAkB,EAAEE,CAAC,EAAE,EAAE;MAC3CD,QAAQ,IAAIE,MAAM,CAACC,YAAY,CAACL,gBAAgB,CAAC;MACjDA,gBAAgB,EAAE;MAElB,IAAIA,gBAAgB,GAAG,GAAG,EAAE;QAC1BC,kBAAkB,EAAE;QACpBD,gBAAgB,GAAG,EAAE;;;IAGzB,OAAOE,QAAQ;GAChB;;AAGH,SAASI,yBAAyBA,CAACtB,KAAa,EAAE;EAChD,MAAMC,QAAQ,GAAG,IAAAX,oBAAmB,EAAOY,mBAAP,CAACF,KAAK,CAAC,CAACJ,KAAK,CAAC,CAAC,CAAC,CAACO,KAAK,CAAC,GAAG,CAAC;EAC/D,MAAMoB,eAAe,GAAGR,oBAAoB,EAAE;EAC9C,MAAMS,SAAS,GAAgC,EAAE;EACjD,OAAO;IACLC,uBAAuB,EAAExB,QAAQ,CAC9BM,GAAG,CAAEC,OAAO,IAAK;MAChB,IAAIA,OAAO,CAACd,UAAU,CAAC,GAAG,CAAC,IAAIc,OAAO,CAACb,QAAQ,CAAC,GAAG,CAAC,EAAE;QACpD,MAAM;UAAEG,GAAG;UAAEL,QAAQ;UAAEI;QAAM,CAAE,GAAGN,cAAc,CAACiB,OAAO,CAACZ,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACtE;QACA;QACA,IAAI8B,UAAU,GAAG5B,GAAG,CAAC6B,OAAO,QAAQ,EAAE,CAAC;QACvC,IAAIC,UAAU,GAAG,KAAK;QAEtB;QACA;QACA,IAAIF,UAAU,CAACG,MAAM,KAAK,CAAC,IAAIH,UAAU,CAACG,MAAM,GAAG,EAAE,EAAE;UACrDD,UAAU,GAAG,IAAI;;QAEnB,IAAI,CAACE,KAAK,CAACC,QAAQ,CAACL,UAAU,CAAC9B,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE;UAC5CgC,UAAU,GAAG,IAAI;;QAGnB,IAAIA,UAAU,EAAE;UACdF,UAAU,GAAGH,eAAe,EAAE;;QAGhCC,SAAS,CAACE,UAAU,CAAC,GAAG5B,GAAG;QAC3B,OAAOD,MAAM,GACTJ,QAAQ,GACL,UAASiC,UAAW,SAAQ,GAC5B,OAAMA,UAAW,OAAM,GACzB,OAAMA,UAAW,UAAS;OAChC,MAAM;QACL,OAAQ,IAAG,IAAAtC,aAAkB,EAASsB,kBAAT,CAACF,OAAO,CAAE,EAAC;;KAE3C,CAAC,CACDG,IAAI,CAAC,EAAE,CAAC;IACXa;GACD;;AAQI,SAAStC,kBAAkBA,CAAC0B,eAAuB,EAAE;EAC1D,MAAMoB,MAAM,GAAGV,yBAAyB,CAACV,eAAe,CAAC;EACzD,OAAOqB,QAAA,KACFhD,aAAa,CAAC2B,eAAe,CAAC;IACjCsB,UAAU,EAAG,IAAGF,MAAM,CAACP,uBAAwB,SAAQ;IACvDD,SAAS,EAAEQ,MAAM,CAACR;IACnB;;AAOI,SAASrC,uBAAuBA,CACrCyB,eAAuB,EACvBuB,OAEC,EACD;EACA,MAAM;IAAE7B;EAAkB,CAAE,GAAGP,oBAAoB,CAACa,eAAe,CAAC;EACpE,MAAM;IAAEwB,QAAQ,GAAG;EAAI,CAAE,GAAGD,OAAO;EACnC,IAAI7B,kBAAkB,KAAK,GAAG,EAAE;IAC9B,IAAI+B,aAAa,GAAGD,QAAQ,GAAG,IAAI,GAAG,EAAE;IACxC,OAAO;MACLF,UAAU,EAAG,KAAIG,aAAc;KAChC;;EAGH,MAAM;IAAEZ;EAAuB,CAAE,GAAGH,yBAAyB,CAACV,eAAe,CAAC;EAC9E,IAAI0B,oBAAoB,GAAGF,QAAQ,GAAG,YAAY,GAAG,EAAE;EACvD,OAAO;IACLF,UAAU,EAAG,IAAGT,uBAAwB,GAAEa,oBAAqB;GAChE"},"metadata":{},"sourceType":"script","externalDependencies":[]}